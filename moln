#!/bin/bash
#
# Copyright (C) 2022 Fredrik Öhrström (spdx: MIT)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

MOLN=$(realpath $0)
verbose=false
debug=false

if [ -z "$AWS_ACCOUNT" ]
then
    if [ ! -f $HOME/.config/moln/moln.env ]
    then
        mkdir -p $HOME/.config/moln
        echo "AWS_ACCOUNT=$(aws sts get-caller-identity --output text --query Account)"  >> $HOME/.config/moln/moln.env
        echo "AWS_DEFAULT_REGION=$(aws configure get region)" >> $HOME/.config/moln/moln.env
    fi
    . $HOME/.config/moln/moln.env
fi

##############################################################
normal=$(printf '\033[0m')
yellow=$(printf '\033[33m')
blue=$(printf '\033[34m')
red=$(printf '\033[31m')
green=$(printf '\033[32m')

NA="${red}NA${normal}"

function cmd_columnize_post
{
    # Default post function when a pre function has been specified.
    column -t -s $'\t'
}

function getTag
{
    local NAME="$1"
    local JSON="$2"
    local HASTAGS=$(echo "$JSON" | jq -jr '.Tags')
    if [ "$HASTAGS" = "null" ]
    then
        # Tags does not exist at all.
        echo "$NA"
    else
        local VAL=$(echo "$JSON" | jq -jr '(.Tags[] | select (.Key == "'$NAME'") | .Value)')
        if [ -n "$VAL" ]
        then
            echo "$VAL"
        else
            echo "$NA"
        fi
    fi
}

function duration_since
{
    # Take a timestamp as an argument and output: 4m (for 4minutes) 4h (for 4 hours) 8d (for 8 days)
    TIMESTAMP="$1"
    THEN=$(date -d "$TIMESTAMP" "+%s")
    NOW=$(date "+%s")
    let DIFF=($NOW-$THEN)/86400
    if [ "$DIFF" = "0" ]
    then
        let DIFF=($NOW-$THEN)/3600
        if [ "$DIFF" = "0" ]
        then
            let DIFF=($NOW-$THEN)/60
            echo "${DIFF}m"
        else
            echo "${DIFF}h"
        fi
    else
        echo "${DIFF}d"
    fi
}
# Basic information part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Basic_Information="whoami"

## whoami ########################################################

function help_whoami {
    echo "whoami"
    echo "Display active account/identity."
}

function cmd_aws_whoami {
    echo "# AWS"
    aws sts get-caller-identity
}

function cmd_azure_whoami {
    echo "# Azure"
    az account list
}

function cmd_gcloud_whoami {
    echo "# Gcloud"
    gcloud config list
}
###############################################################################
# Buckets part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT #
###############################################################################

cmds_Buckets="list-buckets list-bucket-content"

function help_list_buckets {
    echo "list-buckets"
    echo "List storage buckets, ie aws s3/gcloud storage/azure blobs."
}

function cmd_list_buckets_pre
{
    printf "CLOUD\tNAME\t\n"
}

function summarize_aws_bucket
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME=$(echo "$JSON" | jq -jr '.Name')
        printf "aws\t$NAME\t\n"
    fi
}

function cmd_aws_list_buckets
{
    aws s3api list-buckets --output json | jq -c '.Buckets[]' | while IFS=$"\n" read -r info; do summarize_aws_bucket "$info" ; done
}
# Connect to a remote cli console for the cloud service. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Cloud_Console="console"

## whoami ########################################################

function cmd_aws_console {
    echo "# Connecting to aws cloud console..."
}

function cmd_azure_console {
    echo "# Connecting to azure cloud console..."
}

function cmd_gcloud_console {
    echo "# Connecting to gcloud cloud console..."
}
# Costs part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Costs="list-costs"

## costs ########################################################

function cmd_aws_list_costs
{
cat > /tmp/filters.json <<EOF
{
    "Dimensions": {
        "Key": "SERVICE",
        "Values": [
            "Amazon Elastic Compute Cloud - Compute"
        ]
    }
}
EOF

    aws ce get-cost-and-usage \
    --time-period Start=2021-12-01,End=2021-12-30 \
    --metrics "BlendedCost" \
    --granularity MONTHLY \
    --filter='{ "Dimensions": { "Key": "SERVICE", "Values": [ "Amazon Elastic Compute Cloud - Compute" ] } }' \
    --group-by "Type=TAG,Key=Customer" | tee costs.json
}
#    --filter file:///tmp/filters.json \
# Dns part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Dns="list-hosted-zones list-dns-records upsert-dns-record remove-dns-record list-domains"

## dns ############################################################

function cmd_list_hosted_zones_pre
{
    printf "CLOUD\tDOMAIN\tPRIVATE\tID\t\n"
}

function cmd_aws_list_hosted_zones
{
    aws route53 --region us-east-1 list-hosted-zones | \
        jq -r '.HostedZones[] | [ "aws", .Name, .Config.PrivateZone, .Id ] | join("\t")'
}

function cmd_list_dns_records_pre
{
    printf "CLOUD\tDOMAIN\tTYPE\tTTL\tIP\t\n"
}

function cmd_aws_list_dns_records
{
    DOMAIN=$1

    ID=$(aws route53 list-hosted-zones-by-name --dns-name ${DOMAIN} --query HostedZones[].Id --output text | cut -d/ -f3)

    aws route53 list-resource-record-sets --hosted-zone-id=${ID} | \
        jq -r '.ResourceRecordSets[] | [ "aws", .Name, .Type, .TTL, (.ResourceRecords[].Value )  ] | join("\t")' \
        | grep -v "SOA" | grep -v "NS"
}

function cmd_list_domains_pre
{
    printf "CLOUD\tDOMAIN\tAUTO_RENEW\tTRANSFER_LOCK\tEXPIRES\t\n"
}

function cmd_aws_list_domains
{
    aws route53domains --region us-east-1 list-domains | \
        jq -r '.Domains[] | [ "aws", .DomainName, .AutoRenew, .TransferLock, .Expiry ] | join("\t")'
}

function cmd_aws_upsert_dns_record
{
    # Usage: moln aws upsert-dns-record testur.ferrrbarr.com A 10.11.12.13
    NAME=$1
    TYPE=$2
    DEST=$3

    if [ -z "$NAME" ] || [ -z "$TYPE" ] || [ -z "$DEST" ]
    then
        echo "Usage: moln aws upsert-dns-record alfa.beta.com A 1.2.3.4"
        exit 1
    fi
    # Grab the host name.
    HOST=${NAME%%.*}
    # Grab everything after the first .
    DOMAIN=${NAME#*.}

    if [ -z "$DOMAIN" ]
    then
        echo "You must have a full host.domain.com specified!"
        exit 1
    fi

    FILE=$(mktemp create_record_XXXXXXX.json)
    cat > $FILE <<EOF
{
    "Comment": "CREATE/DELETE/UPSERT a record ",
    "Changes": [{
    "Action": "UPSERT",
    "ResourceRecordSet": {
        "Name": "${NAME}.",
        "Type": "A",
        "TTL": 300,
        "ResourceRecords": [{ "Value": "${DEST}"}]
    }}]
}
EOF

    ID=$(aws route53 list-hosted-zones-by-name --dns-name ${DOMAIN} --query HostedZones[].Id --output text | cut -d/ -f3)

    echo "Adding $HOST $TYPE $DEST to domain $DOMAIN $ID"

    aws route53 change-resource-record-sets --hosted-zone-id ${ID} --change-batch file://${FILE}
}

function cmd_aws_remove_dns_record
{
    # Usage: moln aws remove-dns-record testur.ferrrbarr.com
    NAME=$1

    if [ -z "$NAME" ]
    then
        echo "Usage: moln aws remove-dns-record alfa.beta.com"
        exit 1
    fi
    # Grab the host name.
    HOST=${NAME%%.*}
    # Grab everything after the first .
    DOMAIN=${NAME#*.}

    if [ -z "$DOMAIN" ]
    then
        echo "You must have a full host.domain.com specified!"
        exit 1
    fi

    ID=$(aws route53 list-hosted-zones-by-name --dns-name ${DOMAIN} --query HostedZones[].Id --output text | cut -d/ -f3)

    FIELDS=$(aws route53 list-resource-record-sets --hosted-zone-id ${ID} | \
                 jq -r '.ResourceRecordSets[] | [ .Name, .Type, .TTL, (.ResourceRecords[].Value )  ] | join("\t")' | \
          grep "$NAME")

    NAMEO=$(echo "$FIELDS" | cut -f 1)
    TYPE=$(echo "$FIELDS" | cut -f 2)
    TTL=$(echo "$FIELDS" | cut -f 3)
    DEST=$(echo "$FIELDS" | cut -f 4)

    if [ -z "$NAMEO" ]
    then
        echo "No record for $NAME exists!"
        exit 1
    fi

    echo "Removing $HOST $TYPE $DEST from domain $DOMAIN $ID"

    FILE=$(mktemp remove_record_XXXXXXX.json)
    cat > $FILE <<EOF
{
    "Comment": "CREATE/DELETE/UPSERT a record ",
    "Changes": [{
    "Action": "DELETE",
    "ResourceRecordSet": {
        "Name": "${NAME}",
        "Type": "${TYPE}",
        "TTL": ${TTL},
        "ResourceRecords": [{ "Value": "${DEST}"}]
    }}]
}
EOF

    aws route53 change-resource-record-sets --hosted-zone-id ${ID} --change-batch file://${FILE}
}
# Groups part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Groups="list-groups-for-user list-attached-group-policies"

## groups ########################################################
###############################################################################
# Install part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT #
###############################################################################

cmds_Install_Tools="install"

function cmd_install_pre {
    mkdir -p $HOME/opt
    mkdir -p $HOME/bin
    if ! command -v unzip &> /dev/null
    then
        echo "Please install the unzip command!"
        exit 1
    fi
}

function cmd_aws_install
{
    echo "Fetching https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip into $HOME/opt"
    cd $HOME/opt
    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    echo "Unzipping downloaded cli zip..."
    unzip -q awscliv2.zip
    echo "Now running: ./aws/install -i $HOME/opt/aws-cli -b $HOME/bin"
    ./aws/install -i $HOME/opt/aws-cli -b $HOME/bin
    echo "You can now delete the directory ./aws"
    echo "Done."
}

function cmd_gcloud_install {
    echo "Fetching https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-407.0.0-linux-x86_64.tar.gz"
    cd $HOME/opt
    curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-407.0.0-linux-x86_64.tar.gz -o gcsdk.tgz
    echo "Untaring downloaded cli tgz..."
    tar xzf gcsdk.tgz
    echo "Now running: ./google-cloud-sdk/install.sh"
    ./google-cloud-sdk/install.sh
    echo "You can now delete ./google-cloud-sdk"
    echo "Done."
}

function cmd_azure_install {
    echo "Removing azure-cli to avoid any old versions in Ubuntu universe 20..." ;
    sudo apt remove azure-cli -y && sudo apt autoremove -y
    sudo apt-get update
    echo "Installing necessary tools to install"
    sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
    echo "Installing microsoft gpg public key."
    curl -sL https://packages.microsoft.com/keys/microsoft.asc | \
        gpg --dearmor | \
        sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
    echo "Adding microsoft deb repo to apt."
    AZ_REPO=$(lsb_release -cs)
    echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
        sudo tee /etc/apt/sources.list.d/azure-cli.list
    echo "Installing azure-cli."
    sudo apt-get update
    sudo apt-get install azure-cli
    echo "Done."
}
##################################################################################
# IP address part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT #
##################################################################################

cmds_Public_IPs="allocate-ip list-ips bind-ip"

function summarize_aws_ip
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        echo "$1" | jq .
    fi
}

function cmd_list_ips_pre
{
    printf "CLOUD\tNAME\tCIDR_BLOCK\tSTATUS\tID\t\n"
}

function cmd_aws_list_ips
{
    aws ec2 describe-addresses | jq -c '.Addresses[]' | while IFS=$"\n" read -r info; do summarize_aws_ip "$info" ; done
}

function cmd_list_vpcs_ips
{
    #    column -t -s $'\t'
    echo ""
}

function cmd_aws_allocate_ip
{
    NAME="$1"
    if [ -z "$NAME" ]
    then
        echo "Usage: moln aws create-ip Name"
        exit 1
    fi
    TAGS="ResourceType=string,Tags='[{Key=Name,Value=\"${NAME}\"}]'"
    echo aws ec2 allocate-address
}
# Policies part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Policies="list-policies"

# policies ############################################################################################

function cmd_aws_list_policies
{
    POLICY=$1
    aws iam list-policies --query  "Policies[].Arn"
}
# Roles part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Roles="print-default-role-policy create-role attach-role-policy list-attached-role-policies list-roles assume-role"

## roles ############################################################

function cmd_aws_list_roles
{
    ROLE=$1
    aws iam list-roles --query  "Roles[].Arn"
}

function cmd_aws_assume_role
{
    ROLE_ARN=arn:aws:iam::${AWS_ACCOUNT}:role/$1
    SESSION_NAME=$2
    if [ -z "$SESSION_NAME" ] || [ -z "$ROLE_ARN" ]
    then
        echo "Usage: moln aws assume-role <role> <session_name>"
        exit 1
    fi
    echo "aws sts assume-role --role-arn $ROLE_ARN --role-session-name $SESSION_NAME > session.token"
    aws sts assume-role --role-arn "$ROLE_ARN" --role-session-name "$SESSION_NAME" > session.token
    ROLE_SESSION_NAME=$(jq .AssumedRoleUser.Arn session.token | tr -d '"' | cut -f 2- -d '/')
    echo "Role session ${ROLE_SESSION_NAME} expires $(jq .Credentials.Expiration session.token | tr -d '"')"
    AWS_ACCESS_KEY_ID=$(jq .Credentials.AccessKeyId session.token | tr -d '"') \
    AWS_SECRET_ACCESS_KEY=$(jq .Credentials.SecretAccessKey session.token | tr -d '"') \
    AWS_SESSION_TOKEN=$(jq .Credentials.SessionToken session.token | tr -d '"') \
    bash --rcfile <(echo 'export PS1="${PS1}\[\033[01;31m\]['${ROLE_SESSION_NAME}']\[\033[00m\]\$ "')
}
# Subnet part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Subnets_inside_a_VPC="create-subnet list-subnets"

## subnets ########################################################

function summarize_aws_subnet
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME='Not set!'
        if [ "$(echo "$JSON" | jq -jr '.Tags')" != "null" ]
        then
            NAME=$(echo "$JSON" | jq -jr '(.Tags[] | select (.Key == "Name") | .Value)')
        fi
        ID=$(echo "$JSON" | jq -jr '.VpcId')
        STATUS=$(echo "$JSON" | jq -jr '.State')
        CIDR_BLOCK=$(echo "$JSON" | jq -jr '.CidrBlock')
        IS_DEFAULT=
        if [ "$(echo "$JSON" | jq -jr '.IsDefault')" = "true" ]
        then
            IS_DEFAULT=DEFAULT
        fi

        printf "aws\t$NAME\t$CIDR_BLOCK\t$STATUS\t$ID\t$IS_DEFAULT\n"
    fi
}

function cmd_list_subnets_pre
{
    printf "CLOUD\tNAME\tCIDR_BLOCK\tSTATUS\tID\t\n"
}

function cmd_aws_list_subnets
{
    aws ec2 describe-subnets | jq -c '.Subnets[]' | while IFS=$"\n" read -r info; do summarize_aws_subnet "$info" ; done | sort
}

function cmd_list_subnets_post
{
    column -t -s $'\t'
}
# User part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Users="list-users"

## users ########################################################

function cmd_list_users_pre
{
    printf "CLOUD\tNAME\tID\t\n"
}

function summarize_aws_user {
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME=$(echo "$JSON" | jq -jr '.UserName')
        ID=$(echo "$JSON" | jq -jr '.UserId')
        printf "aws\t$NAME\t$ID\t\n"
    fi
}

function cmd_aws_list_users {
    aws iam list-users | jq -c '.Users[]' | while IFS=$"\n" read -r info; do summarize_aws_user "$info" ; done
}

function summarize_azure_user {
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME=$(echo "$JSON" | jq -jr '.displayName')
        ID=$(echo "$JSON" | jq -jr '.id')
        printf "azure\t$NAME\t$ID\t\n"
    fi
}

function cmd_azure_list_users {
    az ad user list | jq -c '.[]' | while IFS=$"\n" read -r info; do summarize_azure_user "$info" ; done
}

function summarize_gcloud_user {
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME=$(echo "$JSON" | jq -jr '.displayName')
        ID=$(echo "$JSON" | jq -jr '.uniqueId')
        printf "gcloud\t$NAME\t$ID\t\n"
    fi
}

function cmd_gcloud_list_users {
    gcloud iam service-accounts --format=json list | jq -c '.[]' | while IFS=$"\n" read -r info; do summarize_gcloud_user "$info" ; done
}
# Copyright (C) 2022 Fredrik Öhrström license spdx: MIT
#
# Virtual machine information part of moln.

cmds_Vms="create-vm-from-template show-vm start-vm stop-vm list-vms destroy-vm ssh_to_vm set-vm-customer list-vm-templates show-vm-image list-disk-snapshots"

function cmd_aws_to_vm_id
{
    A="$1"
    if [[ $A == i-* ]]
    then
        # The argument is already an id.
        echo $A
    fi
    NAME="$1"
    aws ec2 describe-instances --filters "Name=tag:Name,Values=${NAME}" | jq -r .Reservations[].Instances[].InstanceId
}

function cmd_list_vm_templates_pre
{
    printf "CLOUD\tID\tNAME\tCREATION\t\n"
}

function cmd_list_vm_templates_post
{
    column -t -s $'\t'
}

function summarize_aws_vm_template
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ "$debug" = "true" ]; then echo "$JSON"; fi
    NAME=$(echo "$JSON" | jq -jr '.LaunchTemplateName')
    ID=$(echo "$JSON" | jq -jr '.LaunchTemplateId')
    CREATION=$(echo "$JSON" | jq -jr '.CreateTime')
    printf "aws\t$ID\t$NAME\t$CREATION\t\n"
}

function cmd_aws_list_vm_templates
{
    CMD="aws ec2 describe-launch-templates"

    if [ "$verbose" = "true" ]; then echo "$CMD" | tr -s ' ' ; fi
    eval "$CMD" | jq -c '.LaunchTemplates[]' | while IFS=$"\n" read -r info; do summarize_aws_vm_template "$info" ; done | sort -k3
}

function cmd_list_vm_images_pre
{
    printf "CLOUD\tID\tCREATION\tNAME\tDESCRIPTION\tDEPRECATION\t\n"
}

function cmd_list_vm_images_post
{
    column -t -s $'\t'
}

function summarize_aws_vm_image
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ "$debug" = "true" ]; then echo "$JSON"; fi
    NAME=$(echo "$JSON" | jq -jr '.Name')
    ID=$(echo "$JSON" | jq -jr '.ImageId')
    CREATION=$(echo "$JSON" | jq -jr '.CreationDate')
    DEPRECATION=$(echo "$JSON" | jq -jr '.DeprecationTime')
    DESCRIPTION=$(echo "$JSON" | jq -jr '.Description')
    printf "aws\t$ID\t$CREATION\t$NAME\t$DESCRIPTION\t$DEPRECATION\t\n"
}

function cmd_aws_list_vm_images
{
    OS=$1
    VERSION=$2
    ARCH=$3

    if [ -z "$OS" ]; then echo "You have to specify an os! (e.g. ubuntu RHEL debian)" ; exit 1; fi;
    if [ -z "$VERSION" ]; then echo "You have to specify a version! (e.g. 22.04 8.6.0 11)" ; exit 1; fi;
    if [ -z "$ARCH" ]; then ARCH="x86_64"; fi

    CMD="aws ec2 describe-images \
            --owners self amazon \
            --filters \"Name=architecture,Values=${ARCH}\" \"Name=name,Values=*${OS}*${VERSION}*\" \"Name=root-device-type,Values=ebs\" "
#            --query 'Images[*].[ImageId,CreationDate,Name,Description,DeprecationTime]' --output text \
#            | sort -k2 -r \
#            | head -n1"

    if [ "$verbose" = "true" ]; then echo "$CMD" | tr -s ' ' ; fi
    eval "$CMD" | jq -c '.Images[]' | while IFS=$"\n" read -r info; do summarize_aws_vm_image "$info" ; done | sort -k3
}

function cmd_aws_show_vm_image
{
    IMAGE=$1

    aws ec2 describe-images \
        --image-ids ${IMAGE}
}

function cmd_aws_create_vm_from_template
{
    NAME=$1
    TEMPLATE_NAME=$2

    CMD="aws ec2 run-instances \
         --launch-template LaunchTemplateName=${TEMPLATE_NAME} \
         --tag-specifications \"ResourceType=instance,Tags=[{Key=Name,Value=${NAME}}]\" "

    if [ "$verbose" = "true" ]; then echo "$CMD" | tr -s ' ' ; fi
    eval "$CMD" > ${NAME}.json

    if [ "$?" != "0" ]
    then
        echo "Failed to create $NAME"
        rm ${NAME}.json
        exit 1
    fi

    jq -r .Instances[].PrivateIpAddress ${NAME}.json > ${NAME}.ip

    echo "Successfully created ${NAME} look in ${NAME}.json ${NAME}.ip"
}

function cmd_azure_create_vm_from_template
{
    az vm create --resource-group Norge --name $NAME --image UbuntuLTS --generate-ssh-keys --admin-username azureuser --verbose
}

function cmd_gcloud_create_vm
{
    echo "Not implemented."
}

function cmd_aws_start_vm
{
    ID=$(cmd_aws_to_vm_id $1)
    aws ec2 start-instances --instance-id "$ID"
}

function cmd_azure_start_vm
{
    NAME=$1
    az vm start --resource-group Norge --name "$NAME" --verbose
}

function cmd_gcloud_start_vm
{
    NAME=$1
    gcloud compute instances start "$NAME"
}

function cmd_aws_stop_vm
{
    ID=$(cmd_aws_to_vm_id $1)
    aws ec2 stop-instances --instance-id "$ID"
}

function cmd_azure_stop_vm
{
    az vm deallocate --resource-group Norge --name "$NAME" --verbose
}

function cmd_gcloud_stop_vm
{
    gcloud compute instances stop "$NAME"
}

function cmd_aws_destroy_vm
{
    # Supply a vm id or a name.
    NAMEID="$1"
    YESREALLY=false
    if [ "$NAMEID" = "--yes-really-destroy-now" ]
    then
        NAMEID="$2"
        YESREALLY=true
    fi
    ID=$(cmd_aws_to_vm_id "$NAMEID")

    CMD="aws ec2 terminate-instances --instance-ids $ID"

    echo "Deleting vm ----------------"
    cmd_aws_show_vm $ID
    echo "----------------------------"

    if [ "$YESREALLY" = "false" ]
    then
        echo
        echo "Type \"delete $ID\" to delete vm."
        read d n
        if [ "$d" != "delete" ] || [ "$n" != "$ID" ]
        then
            echo "Nothing deleted."
            exit 1
        fi
    fi

    eval "$CMD"
}

function summarize_aws_vm
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ "$verbose" = "true" ]; then echo "$JSON"; fi
    NAME=$(getTag Name "$JSON")
    ID=$(echo "$JSON" | jq -jr '.InstanceId')
    STATUS=$(echo "$JSON" | jq -jr '.State.Name')
    TIMESTAMP=$(echo "$JSON" | jq -jr .LaunchTime)
    SINCE=$(duration_since "$TIMESTAMP")
    LOCATION=$(echo "$JSON" | jq -r '.Placement.AvailabilityZone')
    IP=$(echo "$JSON" | jq -r '.PublicIpAddress')
    PIP=$(echo "$JSON" | jq -r '.PrivateIpAddress')
    TYPE=$(echo "$JSON" | jq -r '.InstanceType')

    if [ "$IP" = "null" ]; then IP="" ; fi

    printf "aws\t$NAME\t$STATUS\t$SINCE\t$LOCATION\t$TYPE\t$ID\t$PIP\t$IP\n"
}

function summarize_azure_vm
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ "$verbose" = "true" ]; then echo "$JSON"; fi
    NAME=$(echo "$JSON" | jq -r .name)
    STATUS=$(echo "$JSON" | jq -r .powerState)
    TYPE=$(echo "$JSON" | jq -r .hardwareProfile.vmSize)
    ZONE=$(echo "$JSON" | jq -r .location)
    TIMESTAMP=$(echo "$JSON" | grep -Po '"creationTimestamp":"\K.*?(?=")')
    SINCE=$(duration_since "$TIMESTAMP")
    PUBLIC_IPS=$(echo "$JSON" | jq -r .publicIps)
    printf "azure\t$NAME\t$STATUS\t$ZONE\t$TYPE\t$PUBLIC\tIPS\n"
}

function summarize_gcloud_vm {
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ "$verbose" = "true" ]; then echo "$JSON"; fi
    NAME=$(echo "$JSON" | jq -r .name)
    STATUS=$(echo "$JSON" | jq -r .status)
    MACHINETYPE=$(echo "$JSON" | jq -r .machineType)
    ZONE=$(echo "$MACHINETYPE" | grep -Po 'zones/\K.*?(?=/)')
    TYPE=$(echo "$MACHINETYPE" | grep -Po 'machineTypes/\K.*')
    TIMESTAMP=$(echo "$JSON" | jq -r .lastStartTimestamp)
    SINCE=$(duration_since "$TIMESTAMP")
    printf "google\t$NAME\t$STATUS\t$SINCE\t$ZONE\t$TYPE\n"
}

function cmd_list_vms_pre {
    printf "CLOUD\tNAME\tSTATE\tSINCE\tLOCATION\tTYPE\tID\tIP\t\n";
}

function help_list_vms {
    echo "list-vms"
    echo "List all available virtual machines."
}

function cmd_list_vms_post {
    column -t -s $'\t'
}

function cmd_aws_show_vm {
    ID=$(cmd_aws_to_vm_id $1)

    aws ec2 describe-instances --instance-id=$ID | jq -c '.Reservations[].Instances[]' | while IFS=$"\n" read -r info; do summarize_aws_vm "$info" ; done
}

function cmd_aws_list_vms {
    aws ec2 describe-instances | jq -c '.Reservations[].Instances[]' | while IFS=$"\n" read -r info; do summarize_aws_vm "$info" ; done
}

function cmd_azure_list_vms {
    az vm list -d | jq -c '.[]' | while IFS=$"\n" read -r info; do summarize_azure_vm "$info" ; done
}

function cmd_gcloud_list_vms {
    gcloud compute instances list --format json | jq -c '.[]' | while IFS=$"\n" read -r info; do summarize_gcloud_vm "$info" ; done
}

function cmd_aws_ssh_to_vm
{
    SERVER=$1
    IP=$(aws ec2 describe-instances | jq -c '.Reservations[].Instances[]'  | jq -r '.PublicIpAddress')
    ssh -i ~/Nycklar/StockholmServersKeyPair.pem ubuntu@$IP
}

function cmd_azure_ssh_to_vm
{
    SERVER=$1
    ssh azureuser@$(az vm show -d -g Norge -n $SERVER --query publicIps | tr -d '"')
}

function cmd_aws_set_vm_customer
{
    SERVER="$1"
    CUSTOMER="$2"
    aws ec2 create-tags --resources $SERVER --tags 'Key=Customer,Value='$CUSTOMER
}
# Vpc part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT

cmds_Virtual_Private_Clouds="create-vpc list-vpcs"

## vpc ########################################################

function help_list_vpcs {
    echo "list-vpcs"
    echo "List virtual private clouds/networks, aka vpc:s and vnets."
}

function cmd_list_vpcs_pre
{
    printf "CLOUD\tNAME\tCIDR_BLOCK\tSTATUS\tID\t\n"
}

function cmd_aws_create_vpc
{
    NAME="$1"
    if [ -z "$NAME" ]
    then
        echo "Usage: moln aws create-vpc Name"
        exit 1
    fi
    TAGS="ResourceType=string,Tags='[{Key=Name,Value=\"${NAME}\"}]'"
    echo "Create AWS vpc $NAME $TAGS"
}

function summarize_aws_vpc
{
    # Expects a compact json on a single line, no extra spaces.
    JSON="$1"
    if [ -n "$JSON" ]
    then
        NAME='Not set!'
        if [ "$(echo "$JSON" | jq -jr '.Tags')" != "null" ]
        then
            NAME=$(echo "$JSON" | jq -jr '(.Tags[] | select (.Key == "Name") | .Value)')
        fi
        ID=$(echo "$JSON" | jq -jr '.VpcId')
        STATUS=$(echo "$JSON" | jq -jr '.State')
        CIDR_BLOCK=$(echo "$JSON" | jq -jr '.CidrBlock')
        IS_DEFAULT=
        if [ "$(echo "$JSON" | jq -jr '.IsDefault')" = "true" ]
        then
            IS_DEFAULT=DEFAULT
        fi

        printf "aws\t$NAME\t$CIDR_BLOCK\t$STATUS\t$ID\t$IS_DEFAULT\n"
    fi
}


function cmd_aws_list_vpcs
{
    aws ec2 describe-vpcs | jq -c '.Vpcs[]' | while IFS=$"\n" read -r info; do summarize_aws_vpc "$info" ; done
}

function cmd_aws_list_vpcs
{
    aws ec2 describe-vpcs | jq -c '.Vpcs[]' | while IFS=$"\n" read -r info; do summarize_aws_vpc "$info" ; done
}
###############################################################################
# Web api part of moln. Copyright (C) 2022 Fredrik Öhrström license spdx: MIT #
###############################################################################

cmds_WebApis="list-webapi-domains"

function cmd_list_webapi_domains_pre
{
    printf "DOMAIN\tNAME\t\n"
}

function cmd_aws_list_webapi_domains
{
    aws apigatewayv2 get-domain-names | jq -r -c '.Items[].DomainName'
}
#############################################################
# Moln main function entry ##################################
#############################################################

# Extract all commands from the above set of command categories by parsing this file.
all_cmds="$(eval echo $(grep ^cmds_ "$MOLN" | sed 's/\([^=]*\)=.*/\$\1/'))"

# Extract all command groups.
all_cmd_groups="$(grep ^cmds_ "$MOLN" | sed 's/\([^=]*\)=.*/\$\1/')"

# Now check the cloud selected, or all of them.
all_clouds="all aws azure gcloud"
clouds="aws azure gcloud"
verbose=false

if [ "$1" = "-l" ] || [ "$1" = "--list-commands" ]
then
    echo "$all_cmds"
    exit 0
fi

if [ "$1" = "-lc" ] || [ "$1" = "--list-clouds" ]
then
    echo "$all_clouds"
    exit 0
fi

if [ "$1" = "-v" ] || [ "$1" = "--verbose" ]
then
    verbose=true
    shift 1
fi

if [ "$1" = "-d" ] || [ "$1" = "--debug" ]
then
    verbose=true
    debug=true
    shift 1
fi

if [ "$1" = "--list-command-coverage" ]
then
    for i in $all_cmd_groups
    do
        echo "${blue}##### ${i#*_} ${normal}"
        echo
        {
        tmp="$(eval echo $i)"
        for j in $tmp
        do
            info=""
            for cloud in aws azure gcloud
            do
                cmdfunc="cmd_${cloud}_$(echo "$j" | sed 's/-/_/g')"
                if [ "$(type -t $cmdfunc)" = "function" ]
                then
                    info="$info $green$cloud$normal"
                fi
            done
            echo "$j $info"
        done
        } | column -t
        echo
    done
    exit 0
fi

if [ "$1" = "--list-help" ]
then
    for i in $all_cmd_groups
    do
        echo "· ${i#*_}"
        echo
        tmp="$(eval echo $i)"
        for j in $tmp
        do
            helpfunc="help_$(echo "$j" | sed 's/-/_/g')"
            if [ "$(type -t $helpfunc)" = "function" ]
            then
                echo "\fB$(eval $helpfunc | head -n 1)\fR"
                echo ".br"
                eval $helpfunc | tail -n 1
            fi
        done
        echo
    done
    exit 0
fi

cloud=$1
cmd=$2
if [ "$cloud" = "" ] || [ "$cmd" = "" ]
then
    echo "Usage: moln {all|aws|azure|gcloud} [command] <options> <args>"
    exit 0
fi

if  ! echo -n "$all_clouds" | grep -wq $cloud
then
    echo "Error: \"$cloud\" is not a valid cloud provider. ($all_clouds)"
    exit 1
fi

# Now check the command choosen.

if  ! echo -n "$all_cmds" | grep -wq $cmd
then
    echo "Error: \"$cmd\" is not a valid command."
    exit 1
fi

# Now remove the first two arguments.
shift 2

if [ "$cmd" = "assume-role" ]
then
    cmdfunc="cmd_${cloud}_$(echo "$cmd" | sed 's/-/_/g')"
    eval $cmdfunc "$*"
    exit $?
fi

prefunc="cmd_$(echo "$cmd" | sed 's/-/_/g')_pre"
postfunc="cmd_$(echo "$cmd" | sed 's/-/_/g')_post"

if [ ! "$(type -t $prefunc)" = "function" ]
then
    # This is the /bin/true function, not the boolean true.....
    prefunc=true
fi

if [ ! "$(type -t $postfunc)" = "function" ]
then
    if [ ! "$prefunc" = "true" ]
    then
        # The prefunc is set to something, but we have not explicit post.
        # Then use the default post.
        postfunc=cmd_columnize_post
    else
        # No post, and no pre, then just cat the output.
        postfunc=cat
    fi
fi

if [ "$cloud" = "all" ]
then
    (
        eval $prefunc "$*"
        for i in $clouds
        do
            cmdfunc="cmd_${i}_$(echo "$cmd" | sed 's/-/_/g')"
            if [ "$(type -t $cmdfunc)" = "function" ]
            then
                eval $cmdfunc "$*"
            else
                echo "Command $cmd is not implemented for provider $i!"  > /dev/stderr
            fi
        done
    ) | eval $postfunc "$*"
else
    (
        eval $prefunc "$*"
        cmdfunc="cmd_${cloud}_$(echo "$cmd" | sed 's/-/_/g')"
        if [ "$(type -t $cmdfunc)" = "function" ]
        then
            eval $cmdfunc "$*"
        else
            echo "Command $cmd is not implemented for provider $cloud!" > /dev/stderr
        fi
    ) | eval $postfunc
fi
